# SPDX-License-Identifier: AGPL-3.0-or-later
# lint: pylint

from pydantic import BaseModel, PositiveInt, IPvAnyAddress, IPvAnyNetwork


class ConfigRealIP(BaseModel):
    x_for: int = 1
    """Number of values to trust for X-Forwarded-For."""

    ipv4_prefix: int = 32
    """The prefix defines the number of leading bits in an address that are compared
    to determine whether or not an address is part of a (client) network.
    """

    ipv6_prefix: int = 64
    """The prefix defines the number of leading bits in an address that are compared
    to determine whether or not an address is part of a (client) network.
    """


class ConfigRedis(BaseModel):
    secret_hash: str = "change me"
    """FQDN of a function definition. A function with which the DB keys of the Redis
    DB are to be annonymized.
    """

    prefix: str = "botdetection"
    """A prefix to all keys store by the botdetection in the redis DB"""


class ConfigIpLimit(BaseModel):
    filter_link_local: bool = False
    """To get unlimited access in a local network, by default link-lokal addresses
    (networks) are not monitored by the ip_limit
    """

    link_token: bool = False
    """Activate link_token method in the ip_limit method"""


class ConfigLinkToken(BaseModel):
    token_live_time: PositiveInt = 600
    """Livetime (sec) of limiter's CSS token."""

    ping_live_time: PositiveInt = 3600
    """Livetime (sec) of the ping-key from a client (request)"""

    ping_key: str = "botdetection.link_token.PING_KEY"
    """Prefix of all ping-keys generated by link_token.get_ping_key"""

    token_key: str = "botdetection.link_token.TOKEN_KEY"
    """Key for which the current token is stored in the DB"""


class ConfigIpLists(BaseModel):
    """
    In the limiter, the ip_lists method has priority over all other methods -> if
    an IP is in the pass_ip list, it has unrestricted access and it is also not
    checked if e.g. the "user agent" suggests a bot (e.g. curl).
    """

    block_ip: list[IPvAnyAddress] = []
    """
    Example:
    ```python
    block_ip = [
      '93.184.216.34',  # IPv4 of example.org
      '257.1.1.1',      # invalid IP --> will be ignored, logged in ERROR class
    ]
    ```
    """

    pass_ip: list[IPvAnyNetwork] = []
    """
    Example:
    ```python
    pass_ip = [
      '192.168.0.0/16',      # IPv4 private network
      'fe80::/10'            # IPv6 linklocal / wins over botdetection.ip_limit.filter_link_local
    ]
    ```
    """


class ConfigBotDetection(BaseModel):
    redis: ConfigRedis = ConfigRedis()
    ip_limit: ConfigIpLimit = ConfigIpLimit()
    link_token: ConfigLinkToken = ConfigLinkToken()
    ip_lists: ConfigIpLists = ConfigIpLists()


class Config(BaseModel):
    real_ip: ConfigRealIP = ConfigRealIP()
    botdetection: ConfigBotDetection = ConfigBotDetection()
